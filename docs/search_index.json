[
["index.html", "Business and Technical Analytics with R Preface", " Business and Technical Analytics with R Yong Keh Soon 2017-05-08 Preface "],
["1-intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 1. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 1.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 1.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 1.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 1.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2016) in this sample book, which was built on top of R Markdown and knitr (Soon 2017). References "],
["2-random-data-generation.html", "Chapter 2 Random Data Generation", " Chapter 2 Random Data Generation Here is a review of existing methods. "],
["3-grouping-data.html", "Chapter 3 Grouping Data", " Chapter 3 Grouping Data This capter explore manipulating table-like data, summarization and aggregation. "],
["3-1-sample-data.html", "3.1 Sample Data", " 3.1 Sample Data Sample data used simulate two categorical-alike feature, and two numeric value feature: dept is random character between ‘D1’, ‘D2’ and ‘D3’ grp is random character with randomly generated ‘G1’, ‘G2’ value1 represents numeric value, normally distributed at mean 50 value2 is numeric value, normally distributed at mean 25 set.seed(1234) my.df = data.frame( dept = paste(&#39;D&#39;,sample(1:3, 100, replace = T),sep=&#39;&#39;), grp = paste(&#39;G&#39;,sample(1:2, 100, replace = T),sep=&#39;&#39;), team = paste(&#39;T&#39;,sample(1:2, 100, replace = T),sep=&#39;&#39;), value1 = rnorm(1:100, mean = 50, sd = 5), value2 = rnorm(1:100, mean = 20, sd = 3), value3 = rnorm(1:100, mean = 5, sd = 1), stringsAsFactors = F ) head(my.df) ## dept grp team value1 value2 value3 ## 1 D1 G1 T2 48.11381 21.31079 2.683964 ## 2 D2 G2 T2 50.48810 23.18037 5.562472 ## 3 D2 G1 T1 58.19372 21.35657 4.216225 ## 4 D2 G1 T2 45.62204 21.98960 4.773946 ## 5 D3 G1 T2 50.60880 16.59088 3.412897 ## 6 D2 G1 T2 56.81065 18.88851 5.547524 "],
["3-2-grouping-data-1.html", "3.2 Grouping Data", " 3.2 Grouping Data This chapter explore multiple methods to group data columns and computes value within groups. 3.2.1 aggretate - base R Aggregate is a very useful base R function and provides quick way to group data and values: Input in list/data.frame, computes and output new data.frame. It groups categorical variable(s) and compute value variable(s) based on function FUN. FUN can be min, max, mean, sd, sum or length (frequency count). ONLY ONE function is supported, and it applies to all value variables !!! 3.2.1.1 Basic Syntax (formula method) - data source is data.frame The formula method use ‘data’ parameter and therefore apply for single data source only. The objective is simplicy and without flexibility to customize column names aggregate (data = df, formula, FUN = function) Formula in the form: value~categorical one value variable ~ one categorical variable aggregate (data = my.df, value1 ~ grp, FUN = length) ## grp value1 ## 1 G1 48 ## 2 G2 52 one value variable ~ multiple categorical variables aggregate (data = my.df, value1 ~ grp + dept, FUN = length) ## grp dept value1 ## 1 G1 D1 23 ## 2 G2 D1 26 ## 3 G1 D2 14 ## 4 G2 D2 12 ## 5 G1 D3 11 ## 6 G2 D3 14 multiple value variables ~ one categorical variable, use cbind() aggregate (data = my.df, cbind(value1,value2) ~ grp, FUN = length) ## grp value1 value2 ## 1 G1 48 48 ## 2 G2 52 52 multiple value variables ~ multiple categorical variable aggregate (data = my.df, cbind(value1,value2) ~ grp + dept, FUN = length) ## grp dept value1 value2 ## 1 G1 D1 23 23 ## 2 G2 D1 26 26 ## 3 G1 D2 14 14 ## 4 G2 D2 12 12 ## 5 G1 D3 11 11 ## 6 G2 D3 14 14 ALL value variables ~ multiple categorical variable, use dot notation Change from FUN=length to sum results in error because sum() cannot be applied to non-numerical variable ‘team’ aggregate (data = my.df, . ~ grp + dept, FUN = length) ## grp dept team value1 value2 value3 ## 1 G1 D1 23 23 23 23 ## 2 G2 D1 26 26 26 26 ## 3 G1 D2 14 14 14 14 ## 4 G2 D2 12 12 12 12 ## 5 G1 D3 11 11 11 11 ## 6 G2 D3 14 14 14 14 3.2.1.2 Advance Syntax (by method) - data source is either list or data.frame The advantage of ’by method’ are: Can use list/data.frame subset method to choose column to display, hence flexible Can customize output column names (list subset method only) Flexibility to use multiple data sources, hence ‘data’ is not used and has no effect if specified Using list subseting: column name is not preserved, hence must specify meaningful column names. If not supplied, generic names and undesirable column names derived from data value will be used as column name aggregate (x = list(…value_variables…), by = list(…categorical_variables…), FUN = function) aggregate (x = list( v1_mean = my.df$value1, my.df$value2 ), by = list( my.df$grp, DEPT = my.df$dept), FUN=mean) ## Group.1 DEPT v1_mean ## 1 G1 D1 50.31850 ## 2 G2 D1 51.87504 ## 3 G1 D2 51.13119 ## 4 G2 D2 47.15365 ## 5 G1 D3 50.85523 ## 6 G2 D3 51.50880 ## c.21.3107917311184..23.1803717164621..21.3565711895861..21.9895958470612.. ## 1 20.08096 ## 2 19.98123 ## 3 21.17846 ## 4 20.67360 ## 5 18.63134 ## 6 20.35175 Using data.frame subseting: column names are preserved and no option to change. Notice attempt below to change the column name does not succeed aggregate( x = df[,c(…)], by = df[,c(…)]), FUN = function) aggregate( x = df[, p:q], by = df[,s:t]), FUN = function) aggregate(x=my.df[, c(v1_mean=&#39;value1&#39;, &#39;value2&#39;)], by=my.df[,c(GRP=&#39;grp&#39;, &#39;dept&#39;)], FUN=mean) # aggregate(x = my.df[, 4:5], by = my.df[, 1:2], FUN = mean) # produce similar result as above ## grp dept value1 value2 ## 1 G1 D1 50.31850 20.08096 ## 2 G2 D1 51.87504 19.98123 ## 3 G1 D2 51.13119 21.17846 ## 4 G2 D2 47.15365 20.67360 ## 5 G1 D3 50.85523 18.63134 ## 6 G2 D3 51.50880 20.35175 3.2.2 group_by - dplyr Package -->"],
["4-sort-and-filter-data.html", "Chapter 4 Sort and Filter Data ", " Chapter 4 Sort and Filter Data "],
["4-1-sorting-data.html", "4.1 Sorting Data", " 4.1 Sorting Data "],
["4-2-filtering-data.html", "4.2 Filtering Data", " 4.2 Filtering Data ## global chunk option ## knitr::opts_chunk$set(echo=TRUE, message=FALSE, fig.width=2.6736, fig.height=2.5, fig.show=&#39;hold&#39;) -->"],
["5-graphic-visualization.html", "Chapter 5 Graphic Visualization", " Chapter 5 Graphic Visualization This chapter compares various method to plotting using base-R and ggplot. "],
["5-1-library-used.html", "5.1 Library used", " 5.1 Library used Loading necessary library as below: Base R library already included functions: ** hist, plot, barplot, boxplot** library(ggplot2) ## ggplot, qplot "],
["5-2-sample-data-1.html", "5.2 Sample Data", " 5.2 Sample Data This chapter uses the sample data generate with below code. The idea is to simulate two categorical-alike feature, and two numeric value feature: dept is random character between ‘D1’, ‘D2’, ‘D3’, ‘D4’ and ‘D5’ grp is random character with randomly generated ‘G1’, ‘G2’ value1 represents numeric value, normally distributed at mean 50 value2 is numeric value, normally distributed at mean 25 set.seed(1234) my.df = data.frame( dept = paste(&#39;D&#39;,sample(1:5, 100, replace = T),sep=&#39;&#39;), grp = paste(&#39;G&#39;,sample(1:2, 100, replace = T),sep=&#39;&#39;), value1 = rnorm(1:100, mean = 50, sd = 5), value2 = rnorm(1:100, mean = 20, sd = 3), stringsAsFactors = F ) head(my.df) ## dept grp value1 value2 ## 1 D1 G1 52.07262 21.45568 ## 2 D4 G2 47.62641 22.09031 ## 3 D4 G1 50.32997 20.55654 ## 4 D4 G1 47.48761 22.10220 ## 5 D5 G1 45.87001 20.93504 ## 6 D4 G1 50.83495 22.28139 "],
["5-3-histogram.html", "5.3 Histogram", " 5.3 Histogram 5.3.1 Single Dimension Data Require x as numerical data In hist, binwidth setting is not available, only breaks (number of bins) can be specified Default hist/ggplot/qplot number of bins is 30 In qplot, single x numerical variable default to histogram You can’t specify both bins/breaks and bindwidth together, as it implies each other par(mfrow=c(1,2)) hist (my.df$value1) # default breaks = 30 hist (my.df$value1, breaks=3) qplot (data = my.df, x=value1) qplot (data = my.df, x=value1, geom=&#39;histogram&#39;) qplot (data = my.df, x=value1, bins=15) ggplot(data = my.df, aes(x=value1)) + geom_histogram() # default bins = 30 ggplot(data = my.df, aes(x=value1)) + geom_histogram(bins = 15) ggplot(data = my.df, aes(x=value1)) + geom_histogram(binwidth = 10) 5.3.2 Two Dimension Data x = numerical data fill = categorica-alike data qplot (data = my.df, x=value1, fill=grp, geom=&#39;histogram&#39;) ggplot(data = my.df, aes(x=value1, fill=grp)) + geom_histogram() "],
["5-4-scatter-plot.html", "5.4 Scatter Plot", " 5.4 Scatter Plot 5.4.1 Two Dimension Data Use scatter plot to represent correlation between two numeric variables x = number, y = number qplot default to geom_point when two numerical value is supplied for x and y plot (my.df$value1, my.df$value2) qplot (data = my.df, x = value1, y = value2) qplot (data = my.df, x = value1, y = value2, geom=&#39;point&#39;) ggplot(data = my.df, aes(x=value1, y=value2)) + geom_point() 5.4.2 Two + One Dimension Data Base-R does not support extra dimension visualization In qplot/ggplot, the third dimension of data can be represented by assigning color parameter to the third variable Note that fill has not effect on scatter plot. fill should only be used for bar like chart eg. geom_hist or gem_bar plot (my.df$value1, my.df$value2) qplot (data = my.df, x = value1, y = value2, color = grp, geom=&#39;point&#39;) ggplot(data = my.df, aes(x=value1, y=value2, color = grp)) + geom_point() ggplot(data = my.df, aes(x=value1, y=value2, fill = grp)) + geom_point() "],
["5-5-bar-chart.html", "5.5 Bar Chart", " 5.5 Bar Chart 5.5.1 Single Dimension Data Use bar to repfresent frequency chart plot requre a factor to plot frequency chart barplot require conversion of vector into table for plotting qplot default to geom_bar when single categorical-alike feature is used par(mfrow=c(1,2)) plot(as.factor(my.df$dept)) barplot(table(my.df$dept)) qplot (data = my.df, x=dept) qplot (data = my.df, x=dept, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x=dept)) + geom_bar() 5.5.2 Two + One Dimension Data Use fill to introduce extra variable visualizion in filling the bar Use color to have the extra variable represented with border color qplot (data = my.df, dept, fill = grp) qplot (data = my.df, x = dept, fill = grp, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x = dept, fill = grp)) + geom_bar() ggplot(data = my.df, aes(x = dept, color= grp)) + geom_bar() 5.5.3 Reordering qplot (data = my.df, x=dept) qplot (data = my.df, x=dept, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x=dept)) + geom_bar() 5.5.4 Positioning qplot does not support positioning For ggplot/qplot, default position is stack position = ‘dodge’ similar to position = position_dodge(), however the later is more flexible with ability to adjust overlapping level between sub-bar (default is 0.9) g = ggplot(data = my.df, aes(x=dept, fill=grp)) g + geom_bar(position=&#39;stack&#39;) # default position g + geom_bar(position=&#39;dodge&#39;) g + geom_bar(position=position_dodge()) # default 0.9 g + geom_bar(position=position_dodge(0.5)) g + geom_bar(position=position_dodge(1.0)) 5.5.5 In-Bar Text Labeling "],
["5-6-box-plot.html", "5.6 Box Plot", " 5.6 Box Plot 5.6.1 One Dimension Data In boxplot(), only single variable need to be supplied In ggplot/qplot, variable x and y is required. Variable y is the actual value, variable x is the group variable. Case of one dimension, use x=’’ when no grouping is desired boxplot(my.df$value1) qplot (data = my.df, x = &#39;&#39; , y = value1, geom=&#39;boxplot&#39;) ggplot (data = my.df, aes( x= &#39;&#39;, y=value1 )) + geom_boxplot() 5.6.2 Two Dimension Data In boxplot, use ~ to specify y~x, where x is grouping variable boxplot(data = my.df, value1~grp) qplot (data = my.df, x = grp , y = value1, geom=&#39;boxplot&#39;) ggplot (data = my.df, aes(x=grp, y=value1)) + geom_boxplot() 5.6.3 Two + One Dimension Data Extra dimension can be included in for x-axis In boxplot, use + to specify extra dimension In qplot/ggplot, use interaction to specify extra dimension boxplot(data = my.df, value1~grp+dept) qplot (data = my.df, x=interaction(grp,dept) , y=value1, geom=&#39;boxplot&#39;) ggplot (data = my.df, aes(x=interaction(grp,dept) , y=value1)) + geom_boxplot() "],
["5-7-pie-chart.html", "5.7 Pie Chart", " 5.7 Pie Chart -->"],
["6-clustering.html", "Chapter 6 Clustering ", " Chapter 6 Clustering "],
["6-1-introduction.html", "6.1 Introduction", " 6.1 Introduction "],
["6-2-application.html", "6.2 Application", " 6.2 Application "],
["6-3-choosing-the-right-algorithm.html", "6.3 Choosing The Right Algorithm", " 6.3 Choosing The Right Algorithm "],
["6-4-hierarchical-clustering.html", "6.4 Hierarchical Clustering", " 6.4 Hierarchical Clustering "],
["6-5-k-mean-clustering.html", "6.5 K-Mean Clustering", " 6.5 K-Mean Clustering -->"],
["7-classification.html", "Chapter 7 Classification ", " Chapter 7 Classification "],
["7-1-introduction-1.html", "7.1 Introduction", " 7.1 Introduction "],
["7-2-application-1.html", "7.2 Application", " 7.2 Application "],
["7-3-choosing-the-right-algorithm-1.html", "7.3 Choosing The Right Algorithm", " 7.3 Choosing The Right Algorithm "],
["7-4-logistic-regression.html", "7.4 Logistic Regression", " 7.4 Logistic Regression "],
["7-5-decision-tree-regression.html", "7.5 Decision Tree Regression", " 7.5 Decision Tree Regression -->"],
["8-regression.html", "Chapter 8 Regression ", " Chapter 8 Regression "],
["8-1-introduction-2.html", "8.1 Introduction", " 8.1 Introduction "],
["8-2-application-2.html", "8.2 Application", " 8.2 Application "],
["8-3-choosing-the-right-algorithm-2.html", "8.3 Choosing The Right Algorithm", " 8.3 Choosing The Right Algorithm "],
["8-4-linear-regression.html", "8.4 LInear Regression", " 8.4 LInear Regression "]
]
