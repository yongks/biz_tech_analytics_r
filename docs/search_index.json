[
["6-find-order-and-filter-data.html", "Chapter 6 Find, Order and Filter Data ", " Chapter 6 Find, Order and Filter Data "],
["6-1-library.html", "6.1 Library", " 6.1 Library Functions and libraries used in this chapter are as below: Package Function Purpose 1 Base R match return the position(s) of first match order return the positions for each vector element with order which return the positions of value TRUE of a logical vector "],
["6-2-sample-data.html", "6.2 Sample Data", " 6.2 Sample Data 6.2.1 Sample Data Frame str( my.df ) ## &#39;data.frame&#39;: 10 obs. of 2 variables: ## $ dept : chr &quot;D1&quot; &quot;D2&quot; &quot;D2&quot; &quot;D2&quot; ... ## $ value1: num 52.5 47.1 47.3 47.2 45.5 ... head( my.df ) ## dept value1 ## 1 D1 52.53028 ## 2 D2 47.12630 ## 3 D2 47.26684 ## 4 D2 47.17774 ## 5 D3 45.54981 ## 6 D2 47.61404 6.2.2 Sample Vector str( vector ) ## function (mode = &quot;logical&quot;, length = 0L) head( my.vector ) ## [1] 46 27 31 51 19 76 "],
["6-3-finding-data-in-vector.html", "6.3 Finding Data in Vector", " 6.3 Finding Data in Vector Find the first match position number(s) of specific element(s). match ( x, y ) \\(\\quad\\) x = vector of criteria \\(\\quad\\) y = vector of elements to look in Let’s look at the sample vector. my.df$dept ## [1] &quot;D1&quot; &quot;D2&quot; &quot;D2&quot; &quot;D2&quot; &quot;D3&quot; &quot;D2&quot; &quot;D1&quot; &quot;D1&quot; &quot;D2&quot; &quot;D2&quot; Find the position of one criteria. match( &#39;D2&#39;, my.df$dept ) ## [1] 2 Find the positions of multiple criterias. match( c(&#39;D1&#39;,&#39;D2&#39;,&#39;D3&#39;), my.df$dept ) ## [1] 1 2 5 "],
["6-4-ordering-data.html", "6.4 Ordering Data", " 6.4 Ordering Data The key idea of ordering data is to produce an ‘order’ vector representing the position of the elements. Then apply the order list to vector/data.frame to produce sorted result. order make ordering based on a numeric vector. The order result can be applied to vector or data.frame. order ( x, x must be numeric number \\(\\quad\\) decreasing = FALSE, ascending or descending \\(\\quad\\) na.last = TRUE) if TRUE, NA value are put last 6.4.1 Ordering Vector Let’s look at the sample vector. my.vector ## [1] 46 27 31 51 19 76 21 26 100 81 56 65 32 63 33 51 68 Create the order. the.order = order (my.vector, decreasing=T) the.order ## [1] 9 10 6 17 12 14 11 4 16 1 15 13 3 2 8 7 5 Apply the order on vector. my.vector[ the.order ] ## [1] 100 81 76 68 65 63 56 51 51 46 33 32 31 27 26 21 19 6.4.2 Ordering Data Frame We want to order a data.frame based on the values in one or more columns. Here is the data.frame example. head(my.df) ## dept value1 ## 1 D1 52.53028 ## 2 D2 47.12630 ## 3 D2 47.26684 ## 4 D2 47.17774 ## 5 D3 45.54981 ## 6 D2 47.61404 6.4.2.1 One Level Ordering Order the data.frame based on one column - dept. the.order = order(my.df$dept, decreasing=TRUE) head( my.df[the.order,] ) ## dept value1 ## 5 D3 45.54981 ## 2 D2 47.12630 ## 3 D2 47.26684 ## 4 D2 47.17774 ## 6 D2 47.61404 ## 9 D2 50.32229 6.4.2.2 Multi Levels Ordering Order the data.frame based on two columns. However, all columns follow the same decreasing (ascending/desceding). attach(my.df) the.order = order(dept, value1, decreasing=TRUE) head( my.df[the.order,] ) detach(my.df) ## dept value1 ## 5 D3 45.54981 ## 10 D2 54.79747 ## 9 D2 50.32229 ## 6 D2 47.61404 ## 3 D2 47.26684 ## 4 D2 47.17774 "],
["6-5-filtering-data.html", "6.5 Filtering Data", " 6.5 Filtering Data There are two methods of filtering data: Using logical vector Using subset function Using row numbers: which() With these methods, row.names are retained in the output vector/dataframe. subset() is a general function that can be used to filter vector, matrix and data.frame logical vector method - derive a conditional criteria that produce a logical vector, then apply to element selection which() takes logical vector and return actual indices of TRUE elements. The output from which can be use for subsetting 6.5.1 Subseting Vector All methods show in below section has similar results. 6.5.1.1 Using subset() my.vector = 1:100 subset( my.vector, my.vector&gt;10 &amp; my.vector&lt;20) ## [1] 11 12 13 14 15 16 17 18 19 6.5.1.2 Using Logical Vector First, create a logical vector. my.vector = 1:100 lvector = my.vector&gt;10 &amp; my.vector&lt;20 head( lvector, 24 ) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE ## [12] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE FALSE FALSE FALSE ## [23] FALSE FALSE Then apply the logical vector with selection. my.vector[ lvector ] ## [1] 11 12 13 14 15 16 17 18 19 6.5.1.3 Using Row Numbers which returns the indices of TRUE value, of a logical vector. Create a vector containing row numbers for all TRUE values. my.vector = 1:100 w = which (my.vector&gt;10 &amp; my.vector&lt;20) w ## [1] 11 12 13 14 15 16 17 18 19 Then apply the row numbers with selection. my.vector[ w ] ## [1] 11 12 13 14 15 16 17 18 19 ‘which’ has a useful form to return position of max or min value. my.vector = 1:100 which.min ( my.vector ) my.vector [ which.min(my.vector) ] ## [1] 1 ## [1] 1 which.max ( my.vector ) my.vector [ which.max(my.vector) ] ## [1] 100 ## [1] 100 6.5.2 Subseting Data Frame Subsetting data.frame is generally similar to subsetting vector, except that it uses [rows,cols] selectors. 6.5.2.1 Using subset() my.df = data.frame( x = 1:100, y = 300:201 ) head( my.df ) subset( my.df, x&lt;10 &amp; y&lt;297 ) ## x y ## 1 1 300 ## 2 2 299 ## 3 3 298 ## 4 4 297 ## 5 5 296 ## 6 6 295 ## x y ## 5 5 296 ## 6 6 295 ## 7 7 294 ## 8 8 293 ## 9 9 292 6.5.2.2 Using Logical Vector lvector = my.df$x&lt;10 &amp; my.df$y&lt;297 my.df [ lvector, ] ## x y ## 5 5 296 ## 6 6 295 ## 7 7 294 ## 8 8 293 ## 9 9 292 6.5.2.3 Using Row Numbers which returns the positions of value TRUE of a logical vector. z = which (my.df$x&lt;10 &amp; my.df$y&lt;297) my.df [ z, ] ## x y ## 5 5 296 ## 6 6 295 ## 7 7 294 ## 8 8 293 ## 9 9 292 -->"]
]
