[
["7-data-visualization.html", "Chapter 7 Data Visualization", " Chapter 7 Data Visualization This chapter compares various method to plotting using base-R and ggplot. "],
["7-1-library-used.html", "7.1 Library used", " 7.1 Library used Loading necessary library as below: Base R library already included functions: ** hist, plot, barplot, boxplot** library(ggplot2) ## ggplot, qplot library(dplyr) "],
["7-2-sample-data.html", "7.2 Sample Data", " 7.2 Sample Data This chapter uses the sample data generate with below code. The idea is to simulate two categorical-alike feature, and two numeric value feature: dept is random character between ‘D1’, ‘D2’, ‘D3’, ‘D4’ and ‘D5’ grp is random character with randomly generated ‘G1’, ‘G2’ value1 represents numeric value, normally distributed at mean 50 value2 is numeric value, normally distributed at mean 25 set.seed(1234) my.df = data.frame( dept = paste(&#39;D&#39;,sample(1:5, 100, replace = T),sep=&#39;&#39;), grp = paste(&#39;G&#39;,sample(1:2, 100, replace = T),sep=&#39;&#39;), value1 = rnorm(1:100, mean = 50, sd = 5), value2 = rnorm(1:100, mean = 20, sd = 3), stringsAsFactors = F ) head(my.df) ## dept grp value1 value2 ## 1 D1 G1 52.07262 21.45568 ## 2 D4 G2 47.62641 22.09031 ## 3 D4 G1 50.32997 20.55654 ## 4 D4 G1 47.48761 22.10220 ## 5 D5 G1 45.87001 20.93504 ## 6 D4 G1 50.83495 22.28139 "],
["7-3-histogram.html", "7.3 Histogram", " 7.3 Histogram 7.3.1 Single Dimension Data Require x as numerical data 7.3.1.1 Base Graphic In hist, binwidth setting is not available, only breaks (number of bins) can be specified par(mfrow=c(1,2)) hist (my.df$value1) # default breaks = 30 hist (my.df$value1, breaks=3) 7.3.1.2 ggplot2 Default hist/ggplot/qplot number of bins is 30 In qplot, single x numerical variable default to histogram You can’t specify both bins/breaks and bindwidth together, as it implies each other qplot (data = my.df, x=value1) qplot (data = my.df, x=value1, geom=&#39;histogram&#39;) qplot (data = my.df, x=value1, bins=15) ggplot(data = my.df, aes(x=value1)) + geom_histogram() # default bins = 30 ggplot(data = my.df, aes(x=value1)) + geom_histogram(bins = 15) ggplot(data = my.df, aes(x=value1)) + geom_histogram(binwidth = 10) 7.3.2 Two Dimension Data x = numerical data fill = categorica-alike data qplot (data = my.df, x=value1, fill=grp, geom=&#39;histogram&#39;) ggplot(data = my.df, aes(x=value1, fill=grp)) + geom_histogram() "],
["7-4-scatter-plot.html", "7.4 Scatter Plot", " 7.4 Scatter Plot 7.4.1 Two Dimension Data Use scatter plot to represent correlation between two numeric variables x = number, y = number 7.4.1.1 Base Graphic plot (my.df$value1, my.df$value2) 7.4.1.2 ggplot2 qplot default to geom_point when two numerical value is supplied for x and y qplot (data = my.df, x = value1, y = value2) qplot (data = my.df, x = value1, y = value2, geom=&#39;point&#39;) ggplot(data = my.df, aes(x=value1, y=value2)) + geom_point() 7.4.2 Two + One Dimension Data 7.4.2.1 Base Graphic Base-R uses col parameter to represent third dimension col accept vector of number, color name or factor Use factor to automatically assign colors (ensure it is factor type, otherwise, R will complain invalid color name) par(mfrow=c(1,2)) plot (my.df$value1, my.df$value2, col=c(&#39;green&#39;,&#39;blue&#39;,&#39;red&#39;)) plot (my.df$value1, my.df$value2, col=as.factor(my.df$grp)) # plot (my.df$value1, my.df$value2, col=my.df$grp) ... error due to not recognized color name par(mfrow=c(1,1)) 7.4.2.2 ggplot2 In qplot/ggplot, the third dimension of data can be represented by assigning color parameter to the third variable Note that fill has not effect on scatter plot. fill should only be used for bar like chart eg. geom_hist or gem_bar qplot (data = my.df, x = value1, y = value2, color = grp, geom=&#39;point&#39;) ggplot(data = my.df, aes(x=value1, y=value2, color = grp)) + geom_point() ggplot(data = my.df, aes(x=value1, y=value2, fill = grp)) + geom_point() 7.4.3 Overlay Smooth Line 7.4.3.1 Base Graphic Base graphic allow abline to superimpose additional line into current plot For add on linear line, use abline with lm object scatter.smooth make it easy to impose a loess smoothing line par(mfrow=c(1,2)) plot (my.df$value1, my.df$value2, main=&#39;linear line&#39;) abline(lm(my.df$value2~my.df$value1)) scatter.smooth(my.df$value1, my.df$value2, main=&#39;smooth line&#39;) 7.4.3.2 ggplot2 Smooth line is possible for scatter plot, as it require X and Y numeric variables Smooth line can be added with either linear or loess method With overlapping third dimension variable (color), smoothline is also overlapped, hence not a good idea default confidence interval is level=0.95, specify 0 to hide the interval ggplot(data = my.df, aes(x=value1, y=value2)) + geom_point() + geom_smooth() # default method=&#39;loess&#39; ggplot(data = my.df, aes(x=value1, y=value2)) + geom_point() + geom_smooth(level=0) # hide interval with level=0 ggplot(data = my.df, aes(x=value1, y=value2, fill = grp)) + geom_point() + geom_smooth(method=&#39;lm&#39;, level=0.75) "],
["7-5-bar-chart.html", "7.5 Bar Chart", " 7.5 Bar Chart 7.5.1 Single Dimension Data Use bar to repfresent frequency chart plot requre a factor to plot frequency chart barplot require conversion of vector into table for plotting qplot default to geom_bar when single categorical-alike feature is used par(mfrow=c(1,2)) plot(as.factor(my.df$dept)) barplot(table(my.df$dept)) qplot (data = my.df, x=dept) qplot (data = my.df, x=dept, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x=dept)) + geom_bar() qplot (data = my.df, x=dept) qplot (data = my.df, x=dept, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x=dept)) + geom_bar() 7.5.2 Two Dimension This is the data, we summarize department, and derive total value for each department, and their proportion. tmp = my.df %&gt;% group_by(dept) %&gt;% summarize(total_value1 = sum(value1)) %&gt;% mutate(pct_value1 = total_value1/sum(total_value1)) tmp ## # A tibble: 5 x 3 ## dept total_value1 pct_value1 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 D1 1292.3398 0.2574063 ## 2 D2 1298.1313 0.2585599 ## 3 D3 861.6118 0.1716146 ## 4 D4 848.1118 0.1689257 ## 5 D5 720.4269 0.1434936 7.5.2.1 Base R barplot(height=tmp$total_value1, names=tmp$dept, col=&#39;darkred&#39;) barplot(height=tmp$total_value1, names=tmp$dept, horiz=TRUE) #### ggplot Normal Bar Chart Height is actual value ggplot (tmp, aes(x=dept, y=total_value1)) +geom_col() Stacked Bar Chart Height = 1 (100%) ggplot (tmp, aes(x=0, y=pct_value1, fill=dept)) +geom_col() 7.5.3 Two + One Dimension Data Use fill to introduce extra variable visualizion in filling the bar Use color to have the extra variable represented with border color qplot (data = my.df, dept, fill = grp) qplot (data = my.df, x = dept, fill = grp, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x = dept, fill = grp)) + geom_bar() ggplot(data = my.df, aes(x = dept, color= grp)) + geom_bar() 7.5.4 Reordering qplot (data = my.df, x=dept) qplot (data = my.df, x=dept, geom=&#39;bar&#39;) ggplot(data = my.df, aes(x=dept)) + geom_bar() 7.5.5 Positioning qplot does not support positioning For ggplot/qplot, default position is stack position = ‘dodge’ similar to position = position_dodge(), however the later is more flexible with ability to adjust overlapping level between sub-bar (default is 0.9) g = ggplot(data = my.df, aes(x=dept, fill=grp)) g + geom_bar(position=&#39;stack&#39;) # default position g + geom_bar(position=&#39;dodge&#39;) g + geom_bar(position=position_dodge()) # default 0.9 g + geom_bar(position=position_dodge(0.5)) g + geom_bar(position=position_dodge(1.0)) 7.5.6 In-Bar Text Labeling "],
["7-6-pie-chart.html", "7.6 Pie Chart", " 7.6 Pie Chart Pie chart is basically a geom_col stacked bar, with coord_polar() Somehow, width=1 is required, otherwise a small empty circle will be formed at the middle g = my.df %&gt;% group_by(dept) %&gt;% summarize(value1 = sum(value1)) %&gt;% ggplot (aes(x=&#39;&#39;,y=value1,fill=dept)) + geom_col(width=1) + ylab(&#39;Volume 1&#39;) g g + coord_polar(theta=&#39;y&#39;) + theme(axis.title.y = element_blank()) "],
["7-7-box-plot.html", "7.7 Box Plot", " 7.7 Box Plot 7.7.1 One Dimension Data In boxplot(), only single variable need to be supplied In ggplot/qplot, variable x and y is required. Variable y is the actual value, variable x is the group variable. Case of one dimension, use x=’’ when no grouping is desired boxplot(my.df$value1) qplot (data = my.df, x = &#39;&#39; , y = value1, geom=&#39;boxplot&#39;) ggplot (data = my.df, aes( x= &#39;&#39;, y=value1 )) + geom_boxplot() 7.7.2 Two Dimension Data In boxplot, use ~ to specify y~x, where x is grouping variable boxplot(data = my.df, value1~grp) qplot (data = my.df, x = grp , y = value1, geom=&#39;boxplot&#39;) ggplot (data = my.df, aes(x=grp, y=value1)) + geom_boxplot() 7.7.3 Two + One Dimension Data Extra dimension can be included in for x-axis In boxplot, use + to specify extra dimension In qplot/ggplot, use interaction to specify extra dimension boxplot(data = my.df, value1~grp+dept) qplot (data = my.df, x=interaction(grp,dept) , y=value1, geom=&#39;boxplot&#39;) ggplot (data = my.df, aes(x=interaction(grp,dept) , y=value1)) + geom_boxplot() "],
["7-8-side-by-side-plots.html", "7.8 Side By Side Plots", " 7.8 Side By Side Plots "],
["7-9-ggplot-customization.html", "7.9 ggplot Customization", " 7.9 ggplot Customization g = ggplot(data = my.df, aes(x=dept, fill=grp)) + geom_bar() 7.9.1 Title, Subtitle, Caption and Labels 7.9.1.1 Title and Subtitle g + ggtitle(&#39;Main Title&#39;) g + labs(title=&#39;Main Title&#39;, subtitle=&#39;My Subtitle&#39;) 7.9.1.2 Axis Label g + xlab(&#39;My X Axis&#39;) g + ylab(&#39;My Y Axis&#39;) g + labs(x=&#39;My New X Axis Label&#39;, y=&#39;My New Y Axis Label&#39;) 7.9.1.3 Caption Caption is shwon bottom right. g + labs(caption = &quot;(original)&quot;) 7.9.2 Axis Scale and Ticks Simple Method xlim and ylim is a quick way to set axis limit Beware that setting limits too low will discard observations that beyonds the limit g + ylim(0,40) g + xlim(&#39;D3&#39;,&#39;D2&#39;,&#39;D5&#39;) ## Warning: Removed 42 rows containing non-finite values (stat_count). Comprehensive Method with label and breaks scale_ is a combination way to set limits, at the same time setting label and breaks, however, it is slightly complex in syntax - Beware that setting limits too low will discard observations that beyonds the limit Use continous for number, use discrete for categorical g + scale_y_continuous(&#39;Another Y Label&#39;, limits=c(0,40), breaks=seq(0,50,by=5)) g + scale_x_discrete (&#39;Another X Label&#39;, limits=c(&#39;D3&#39;,&#39;D2&#39;,&#39;D5&#39;)) ## Warning: Removed 42 rows containing non-finite values (stat_count). 7.9.3 Customize Components Let’s customize an ugly plot: - axis.title changes both axis.title.x and axis.title.y - axis.text changes both axis.text.x and axis.text.y - axis.ticks changes both axis.ticks.x and axis.ticks.y g + labs(title=&#39;Main Title&#39;, subtitle=&#39;My Subtitle&#39;, caption=&#39;(sourced form ABC)&#39;) + theme( plot.title = element_text (face = &quot;bold&quot;, color = &#39;orange&#39;, size = 12.5), axis.title.x = element_text (face = &quot;bold&quot;, color = &#39;blue&#39;, size = 12.5), axis.title.y = element_text (face = &quot;bold&quot;, color = &#39;red&#39;, size = 12.5), axis.text.x = element_text (face = &#39;bold&#39;, color = &#39;red&#39;, size = 10.0, angle = (90), hjust = 1, vjust = 0.5), axis.text.y = element_text (face = &#39;bold&#39;, color = &#39;blue&#39;, size = 10.0), axis.ticks = element_line (color = &#39;green&#39;, size = 5, linetype = 5), axis.line = element_line (color = &#39;grey&#39;, size = 2, linetype = 3) ) 7.9.4 Clearing Components # Hide x an y axis tick mark labels g + theme( axis.text.x = element_blank(), axis.text.y = element_blank()) # Remove axis ticks and tick mark labels g + theme( axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) 7.9.5 Themes ggplot comes with several great themes to quickly set the appearance of the plot. Difference are the background and grid styles. g + theme_gray() + ggtitle(&#39;theme_gray&#39;) # default g + theme_bw() + ggtitle(&#39;theme_bw&#39;) g + theme_linedraw() + ggtitle(&#39;theme_linedraw&#39;) g + theme_light() + ggtitle(&#39;theme_light&#39;) g + theme_dark() + ggtitle(&#39;theme_dark&#39;) g + theme_classic() + ggtitle(&#39;theme_classic&#39;) g + theme_minimal() + ggtitle(&#39;theme_minimal&#39;) g + theme_void() + ggtitle(&#39;theme_void&#39;) "],
["7-10-double-y-axis-scale.html", "7.10 Double Y-Axis Scale", " 7.10 Double Y-Axis Scale Unfortunately, double Y axis in a single plot is not supported by ggplot. ## set up some fake test data time &lt;- seq(0, 72, 12) betagal.abs &lt;- c(0.05, 0.18, 0.25, 0.31, 0.32, 0.34, 0.35) cell.density &lt;- c(0, 1000, 2000, 3000, 4000, 5000, 6000) ## add extra space to right margin of plot within frame par(mar = c(5, 4, 4, 6) + 0.5) ## Plot first set of data and draw its axis plot(time, betagal.abs, pch = 16, axes = FALSE, ylim = c(0, 1), xlab = &quot;&quot;, ylab = &quot;&quot;, type = &quot;b&quot;, col = &quot;black&quot;, main = &quot;Mike&#39;s test data&quot;) axis(2, ylim = c(0, 1), col = &quot;black&quot;, las = 1) ## las=1 makes horizontal labels mtext(&quot;Beta Gal Absorbance&quot;, side = 2, line = 2.5) box() ## Allow a second plot on the same graph par(new = TRUE) ## Plot the second plot and put axis scale on right plot(time, cell.density, pch = 15, xlab = &quot;&quot;, ylab = &quot;&quot;, ylim = c(0, 7000), axes = FALSE, type = &quot;b&quot;, col = &quot;red&quot;) ## a little farther out (line=4) to make room for labels mtext(&quot;Cell Density&quot;, side = 4, col = &quot;red&quot;, line = 4) axis(4, ylim = c(0, 7000), col = &quot;red&quot;, col.axis = &quot;red&quot;, las = 1) ## Draw the time axis axis(1, pretty(range(time), 10)) mtext(&quot;Time (Hours)&quot;, side = 1, col = &quot;black&quot;, line = 2.5) ## Add Legend legend(&quot;topleft&quot;, legend = c(&quot;Beta Gal&quot;, &quot;Cell Density&quot;), text.col = c(&quot;black&quot;, &quot;red&quot;), pch = c(16, 15), col = c(&quot;black&quot;, &quot;red&quot;)) "],
["7-11-other-aesthetics.html", "7.11 Other Aesthetics", " 7.11 Other Aesthetics 7.11.1 Point Symbols ggplot2 correspond to base R point symbols. While all symbols have a foreground colour, symbols 19-25 also take a background colour (fill) 7.11.2 Line types ggplot2 correspond to base R line types 7.11.3 Colors Source 7.11.4 Other Sources Monash -->"]
]
