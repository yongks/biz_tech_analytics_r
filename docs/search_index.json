[
["5-data-preprocessing.html", "Chapter 5 Data Preprocessing ", " Chapter 5 Data Preprocessing "],
["5-1-sample-data.html", "5.1 Sample Data", " 5.1 Sample Data sample.df &lt;- read.csv ( file=&quot;./datasets/import_sample.csv&quot;, na.strings=c(&#39;NA&#39;,&#39;NULL&#39;,&#39;&#39;), encoding=&quot;UTF-8&quot;) sample.df ## X X.1 age weight gender date_string date_uk date.my ## 1 1 ID101 12 12.10000 Male 1/7/1973 20/07/1973 1973-07-20 ## 2 2 ID102 43 43.12000 Female 8/8/1980 08/08/1980 1980-08-08 ## 3 3 ID103 23 23.12300 Female 31/12/1978 31/12/1978 1978-12-31 ## 4 4 ID104 54 54.12340 Male 12/1/1997 12/01/1997 1997-01-12 ## 5 5 ID105 34 34.12345 Male 2/1/1982 02/01/1982 1982-01-02 ## 6 6 ID106 NA 88.80000 Male &lt;NA&gt; 02/01/1982 &lt;NA&gt; ## 7 7 ID107 NA 88.80000 Male &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 8 8 ID108 NA 88.80000 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; str(sample.df) ## &#39;data.frame&#39;: 8 obs. of 8 variables: ## $ X : int 1 2 3 4 5 6 7 8 ## $ X.1 : Factor w/ 8 levels &quot;ID101&quot;,&quot;ID102&quot;,..: 1 2 3 4 5 6 7 8 ## $ age : int 12 43 23 54 34 NA NA NA ## $ weight : num 12.1 43.1 23.1 54.1 34.1 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 2 2 NA ## $ date_string: Factor w/ 5 levels &quot;1/7/1973&quot;,&quot;12/1/1997&quot;,..: 1 5 4 2 3 NA NA NA ## $ date_uk : Factor w/ 5 levels &quot;02/01/1982&quot;,&quot;08/08/1980&quot;,..: 4 2 5 3 1 1 NA NA ## $ date.my : Factor w/ 5 levels &quot;1973-07-20&quot;,&quot;1978-12-31&quot;,..: 1 3 2 5 4 NA NA NA "],
["5-2-duplicate-and-deleting-columns.html", "5.2 Duplicate and Deleting Columns", " 5.2 Duplicate and Deleting Columns 5.2.1 Duplicating columns Duplicate single column using $ selector sample.df$Z = sample.df$X str(sample.df) ## &#39;data.frame&#39;: 8 obs. of 9 variables: ## $ X : int 1 2 3 4 5 6 7 8 ## $ X.1 : Factor w/ 8 levels &quot;ID101&quot;,&quot;ID102&quot;,..: 1 2 3 4 5 6 7 8 ## $ age : int 12 43 23 54 34 NA NA NA ## $ weight : num 12.1 43.1 23.1 54.1 34.1 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 2 2 NA ## $ date_string: Factor w/ 5 levels &quot;1/7/1973&quot;,&quot;12/1/1997&quot;,..: 1 5 4 2 3 NA NA NA ## $ date_uk : Factor w/ 5 levels &quot;02/01/1982&quot;,&quot;08/08/1980&quot;,..: 4 2 5 3 1 1 NA NA ## $ date.my : Factor w/ 5 levels &quot;1973-07-20&quot;,&quot;1978-12-31&quot;,..: 1 3 2 5 4 NA NA NA ## $ Z : int 1 2 3 4 5 6 7 8 5.2.2 Delete Columns Delete single column using $ column selector, setting to NULL. sample.df$Z = NULL Delete multiple columns using multiple columns selector [,vector], with vector containing column numbers or names, setting to NULL. sample.df[,c(&#39;X&#39;,&#39;date_string&#39;)] = NULL str(sample.df) ## &#39;data.frame&#39;: 8 obs. of 6 variables: ## $ X.1 : Factor w/ 8 levels &quot;ID101&quot;,&quot;ID102&quot;,..: 1 2 3 4 5 6 7 8 ## $ age : int 12 43 23 54 34 NA NA NA ## $ weight : num 12.1 43.1 23.1 54.1 34.1 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 2 2 NA ## $ date_uk: Factor w/ 5 levels &quot;02/01/1982&quot;,&quot;08/08/1980&quot;,..: 4 2 5 3 1 1 NA NA ## $ date.my: Factor w/ 5 levels &quot;1973-07-20&quot;,&quot;1978-12-31&quot;,..: 1 3 2 5 4 NA NA NA "],
["5-3-renaming-columns.html", "5.3 Renaming Columns", " 5.3 Renaming Columns colnames returns vector of names attribute of data.frame. attributes(sample.df) colnames(sample.df) ## $names ## [1] &quot;X.1&quot; &quot;age&quot; &quot;weight&quot; &quot;gender&quot; &quot;date_uk&quot; &quot;date.my&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 ## ## $class ## [1] &quot;data.frame&quot; ## ## [1] &quot;X.1&quot; &quot;age&quot; &quot;weight&quot; &quot;gender&quot; &quot;date_uk&quot; &quot;date.my&quot; Use colnames to rename one or multiple columns. Use [] to select the specific column(s). colnames(sample.df)[c(1,6)] = c(&#39;id&#39;,&#39;date_my&#39;) str(sample.df) ## &#39;data.frame&#39;: 8 obs. of 6 variables: ## $ id : Factor w/ 8 levels &quot;ID101&quot;,&quot;ID102&quot;,..: 1 2 3 4 5 6 7 8 ## $ age : int 12 43 23 54 34 NA NA NA ## $ weight : num 12.1 43.1 23.1 54.1 34.1 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 2 2 NA ## $ date_uk: Factor w/ 5 levels &quot;02/01/1982&quot;,&quot;08/08/1980&quot;,..: 4 2 5 3 1 1 NA NA ## $ date_my: Factor w/ 5 levels &quot;1973-07-20&quot;,&quot;1978-12-31&quot;,..: 1 3 2 5 4 NA NA NA "],
["5-4-data-conversion.html", "5.4 Data Conversion", " 5.4 Data Conversion 5.4.1 Date and String Conversion By default when importing string into data frame, they are converted to factor (stringAsFactor=TRUE). It is usually desirable to convert back to its original format such as string and date. Before Conversion, except for numeric data, notice all string and date columns are imported as factor. str(sample.df) ## &#39;data.frame&#39;: 8 obs. of 6 variables: ## $ id : Factor w/ 8 levels &quot;ID101&quot;,&quot;ID102&quot;,..: 1 2 3 4 5 6 7 8 ## $ age : int 12 43 23 54 34 NA NA NA ## $ weight : num 12.1 43.1 23.1 54.1 34.1 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 2 2 NA ## $ date_uk: Factor w/ 5 levels &quot;02/01/1982&quot;,&quot;08/08/1980&quot;,..: 4 2 5 3 1 1 NA NA ## $ date_my: Factor w/ 5 levels &quot;1973-07-20&quot;,&quot;1978-12-31&quot;,..: 1 3 2 5 4 NA NA NA as.Date can convert vector into date data type. The original data must have a format that allow as.Date to recognize it. as.character will convert vector to chr. sample.df$id = as.character(sample.df$id) sample.df$date_uk = as.Date(sample.df$date_uk, &quot;%d/%m/%Y&quot;) sample.df$date_my = as.Date(sample.df$date_uk, &quot;%Y-%m-%d&quot;) str(sample.df) ## &#39;data.frame&#39;: 8 obs. of 6 variables: ## $ id : chr &quot;ID101&quot; &quot;ID102&quot; &quot;ID103&quot; &quot;ID104&quot; ... ## $ age : int 12 43 23 54 34 NA NA NA ## $ weight : num 12.1 43.1 23.1 54.1 34.1 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 2 2 NA ## $ date_uk: Date, format: &quot;1973-07-20&quot; &quot;1980-08-08&quot; ... ## $ date_my: Date, format: &quot;1973-07-20&quot; &quot;1980-08-08&quot; ... sample.df ## id age weight gender date_uk date_my ## 1 ID101 12 12.10000 Male 1973-07-20 1973-07-20 ## 2 ID102 43 43.12000 Female 1980-08-08 1980-08-08 ## 3 ID103 23 23.12300 Female 1978-12-31 1978-12-31 ## 4 ID104 54 54.12340 Male 1997-01-12 1997-01-12 ## 5 ID105 34 34.12345 Male 1982-01-02 1982-01-02 ## 6 ID106 NA 88.80000 Male 1982-01-02 1982-01-02 ## 7 ID107 NA 88.80000 Male &lt;NA&gt; &lt;NA&gt; ## 8 ID108 NA 88.80000 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; "],
["5-5-string-extraction.html", "5.5 String Extraction", " 5.5 String Extraction "],
["5-6-artificial-grouping.html", "5.6 Artificial Grouping", " 5.6 Artificial Grouping Artificial group can be created based on existing numeric data. Such as age_group based on age. 5.6.1 Grouping with Numeric Breakpoints Simulate data with x,y,z variables. p simulates priority scoring. x = rnorm(10, mean = 10) y = rnorm(10, mean = 10) p = x * y Articial groups is created first by identifying the number of groups, generate the break points vector, then cut the data base on break points and return factor as output. Automatically calculate breakpoints by distributing numbers into the min-max range, in low to high order: num_groups = 4 breakPoints = seq(min(p), max(p), length.out = num_groups + 1) breakPoints ## [1] 85.59917 92.47633 99.35348 106.23063 113.10779 cut ( x, breaks, right = TRUE, include.lowest = FALSE) \\(\\quad\\) x: numeric vector to be cutted \\(\\quad\\) breaks: numeric vector ranging from low to high (in order) \\(\\quad\\) include.lowest: FALSE - ommit element matching lowest number in breaks \\(\\quad\\) right: TRUE - close end on right;open end on left The result from cut is factor based on order from breakPoints. Therefore, once convert into numeric, the group number is in order of low to high accoriding to breakPoints. Verify that group (g) has been assigned for each priority (p). g = as.numeric( cut( p, breakPoints, include.lowest=TRUE)) data.frame(p,g) ## p g ## 1 103.90189 3 ## 2 89.43620 1 ## 3 85.91982 1 ## 4 86.45631 1 ## 5 113.10779 4 ## 6 96.50497 2 ## 7 85.59917 1 ## 8 88.17396 1 ## 9 105.27011 3 ## 10 101.99212 3 5.6.2 Grouping based on Custom Criteria ??? "],
["5-7-handling-missing-data.html", "5.7 Handling Missing Data", " 5.7 Handling Missing Data 5.7.1 Detecting Missing Data 5.7.2 Removing Missing Data "],
["5-8-scaling-data.html", "5.8 Scaling Data", " 5.8 Scaling Data 5.8.1 Sample Data Scaling section will use sample data generated as below: set.seed(1234) my.df = data.frame( id = paste(&#39;ID_&#39;, 1:5, sep = &#39;&#39;), value1 = sample(50:100, 5), value2 = sample(10:50, 5), stringsAsFactors = F ) my.df ## id value1 value2 ## 1 ID_1 55 36 ## 2 ID_2 81 10 ## 3 ID_3 79 19 ## 4 ID_4 98 35 ## 5 ID_5 90 29 5.8.2 Z-Score Scaling scale apply transformation column-wise, for columns within matrix or dataframe scale return a matrix scale (x, center=T, scale=T) # default S-Score transformation \\(\\quad\\) center = T (default) means value minus with mean \\(\\quad\\) scale = T (default) means value divide by sd \\(\\quad\\) \\(\\quad\\) output scaled:center --&gt; mean \\(\\quad\\) \\(\\quad\\) output scaled:scale --&gt; sd scale( my.df[,2:3] ) ## value1 value2 ## [1,] -1.58066858 0.9170971 ## [2,] 0.02469795 -1.4206014 ## [3,] -0.09879179 -0.6113981 ## [4,] 1.07436067 0.8271856 ## [5,] 0.58040174 0.2877167 ## attr(,&quot;scaled:center&quot;) ## value1 value2 ## 80.6 25.8 ## attr(,&quot;scaled:scale&quot;) ## value1 value2 ## 16.19568 11.12205 scale( my.df[,2:3], scale=F ) ## value1 value2 ## [1,] -25.6 10.2 ## [2,] 0.4 -15.8 ## [3,] -1.6 -6.8 ## [4,] 17.4 9.2 ## [5,] 9.4 3.2 ## attr(,&quot;scaled:center&quot;) ## value1 value2 ## 80.6 25.8 5.8.3 Min Max Scaling Min-Max scaling will transform all numbers between 0 and 1. Easiest way to perform this transformation is to write a function then apply. min_max = function(x){(x-min(x))/(max(x)-min(x))} apply( my.df[,2:3], MARGIN = 2, FUN = min_max ) ## 2 means column-wise ## value1 value2 ## [1,] 0.0000000 1.0000000 ## [2,] 0.6046512 0.0000000 ## [3,] 0.5581395 0.3461538 ## [4,] 1.0000000 0.9615385 ## [5,] 0.8139535 0.7307692 -->"]
]
