[
["6-ordering-and-filter-data.html", "Chapter 6 Ordering and Filter Data ", " Chapter 6 Ordering and Filter Data "],
["6-1-sample-data.html", "6.1 Sample Data", " 6.1 Sample Data Sample data used simulate two categorical-alike feature, and two numeric value feature: dept is random character between ‘D1’, ‘D2’ and ‘D3’ grp is random character with randomly generated ‘G1’, ‘G2’ value1 represents numeric value, normally distributed at mean 50 value2 is numeric value, normally distributed at mean 25 set.seed(1234) my.df = data.frame( dept = sample(1:3, 10, replace = T), value1 = rnorm(1:10, mean = 50, sd = 5), stringsAsFactors = F ) my.vector = sample(1:100,18, rep=T) head(my.df) ## dept value1 ## 1 1 52.53028 ## 2 2 47.12630 ## 3 2 47.26684 ## 4 2 47.17774 ## 5 3 45.54981 ## 6 2 47.61404 head(my.vector) ## [1] 46 27 31 51 19 76 "],
["6-2-ordering-data.html", "6.2 Ordering Data", " 6.2 Ordering Data The key idea of ordering data is to produce an ‘order’ vector representing the position of the element. Then apply the order list to vector/data.frame to produce sorted result. order make ordering based on a numeric vector. The order result can be applied to vector or data.frame. order ( x, x must be numeric number \\(\\quad\\) decreasing = FALSE, ascending or descending \\(\\quad\\) na.last = TRUE) if TRUE, NA value are put last 6.2.1 Ordering Vector Create the order. the.order = order (my.vector, decreasing=T) the.order ## [1] 9 10 6 17 12 14 11 4 16 18 1 15 13 3 2 8 7 5 Apply the order on variable. the.order = order (my.vector, decreasing=T) the.order ## [1] 9 10 6 17 12 14 11 4 16 18 1 15 13 3 2 8 7 5 my.vector[ the.order ] ## [1] 100 81 76 68 65 63 56 51 51 49 46 33 32 31 27 26 21 ## [18] 19 6.2.2 Ordering Data Frame One Level Ordering the.order = order(my.df$dept, decreasing=TRUE) my.df[the.order,] ## dept value1 ## 5 3 45.54981 ## 2 2 47.12630 ## 3 2 47.26684 ## 4 2 47.17774 ## 6 2 47.61404 ## 9 2 50.32229 ## 10 2 54.79747 ## 1 1 52.53028 ## 7 1 45.00807 ## 8 1 46.11873 Multi Level Ordering Specify more than one column for multi-level ordering.However, all levels follow the same decreasing (ascending/desceding). attach(my.df) the.order = order(dept, value1, decreasing=TRUE) my.df[the.order,] detach(my.df) ## dept value1 ## 5 3 45.54981 ## 10 2 54.79747 ## 9 2 50.32229 ## 6 2 47.61404 ## 3 2 47.26684 ## 4 2 47.17774 ## 2 2 47.12630 ## 1 1 52.53028 ## 8 1 46.11873 ## 7 1 45.00807 "],
["6-3-filtering-data.html", "6.3 Filtering Data", " 6.3 Filtering Data 6.3.1 Subseting Vector subset() is a general function that can be used to filter vector, matrix and data.frame 6.3.1.1 Using subset() my.vector = 1:100 subset( my.vector, my.vector&lt;10) ## [1] 1 2 3 4 5 6 7 8 9 6.3.2 Subseting Data Frame my.df = data.frame( x = 1:100, y = 300:201 ) subset( my.df, x&lt;10 &amp; y&lt;300 ) ## x y ## 2 2 299 ## 3 3 298 ## 4 4 297 ## 5 5 296 ## 6 6 295 ## 7 7 294 ## 8 8 293 ## 9 9 292 6.3.2.1 Using subset() -->"]
]
