[
["1-fundamentals.html", "Chapter 1 R Fundamentals ", " Chapter 1 R Fundamentals "],
["1-1-package-management.html", "1.1 Package Management", " 1.1 Package Management 1.1.1 Package Storage Here is where all the libraries are stored. Can you guess which are the baseR and third party libraries stored ? .libPaths() ## [1] &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## [2] &quot;C:/Program Files/R/R-3.3.3/library&quot; 1.1.2 Package Listing Use installed.packages() to return a data frame that list all installed packages. head( installed.packages() ) ## Package LibPath ## abind &quot;abind&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## assertthat &quot;assertthat&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## backports &quot;backports&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## base64enc &quot;base64enc&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## BH &quot;BH&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## bitops &quot;bitops&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## Version Priority Depends Imports LinkingTo ## abind &quot;1.4-5&quot; NA &quot;R (&gt;= 1.5.0)&quot; &quot;methods, utils&quot; NA ## assertthat &quot;0.2.0&quot; NA NA &quot;tools&quot; NA ## backports &quot;1.1.0&quot; NA &quot;R (&gt;= 3.0.0)&quot; &quot;utils&quot; NA ## base64enc &quot;0.1-3&quot; NA &quot;R (&gt;= 2.9.0)&quot; NA NA ## BH &quot;1.62.0-1&quot; NA NA NA NA ## bitops &quot;1.0-6&quot; NA NA NA NA ## Suggests Enhances License License_is_FOSS ## abind NA NA &quot;LGPL (&gt;= 2)&quot; NA ## assertthat &quot;testthat&quot; NA &quot;GPL-3&quot; NA ## backports NA NA &quot;GPL-2&quot; NA ## base64enc NA &quot;png&quot; &quot;GPL-2 | GPL-3&quot; NA ## BH NA NA &quot;BSL-1.0&quot; NA ## bitops NA NA &quot;GPL (&gt;= 2)&quot; NA ## License_restricts_use OS_type MD5sum NeedsCompilation Built ## abind NA NA NA &quot;no&quot; &quot;3.3.2&quot; ## assertthat NA NA NA &quot;no&quot; &quot;3.3.3&quot; ## backports NA NA NA &quot;no&quot; &quot;3.3.3&quot; ## base64enc NA NA NA &quot;yes&quot; &quot;3.3.2&quot; ## BH NA NA NA &quot;no&quot; &quot;3.3.2&quot; ## bitops NA NA NA &quot;yes&quot; &quot;3.3.2&quot; TOO MANY COLUMNS !! Below are the column names and its numbering for filtering purpose. colnames( installed.packages() ) ## [1] &quot;Package&quot; &quot;LibPath&quot; ## [3] &quot;Version&quot; &quot;Priority&quot; ## [5] &quot;Depends&quot; &quot;Imports&quot; ## [7] &quot;LinkingTo&quot; &quot;Suggests&quot; ## [9] &quot;Enhances&quot; &quot;License&quot; ## [11] &quot;License_is_FOSS&quot; &quot;License_restricts_use&quot; ## [13] &quot;OS_type&quot; &quot;MD5sum&quot; ## [15] &quot;NeedsCompilation&quot; &quot;Built&quot; Perform column filter based on column names as necessary. Set parameter priority = ‘NA’ to exclude base R packages. head( installed.packages( priority=&#39;NA&#39; ) [,c(1,3)] ) ## Package Version ## abind &quot;abind&quot; &quot;1.4-5&quot; ## assertthat &quot;assertthat&quot; &quot;0.2.0&quot; ## backports &quot;backports&quot; &quot;1.1.0&quot; ## base64enc &quot;base64enc&quot; &quot;0.1-3&quot; ## BH &quot;BH&quot; &quot;1.62.0-1&quot; ## bitops &quot;bitops&quot; &quot;1.0-6&quot; Set parameter priority = ‘high’ will include ONLY base R packages head( installed.packages( priority=&#39;high&#39; ) [,c(3,2)] ) ## Version LibPath ## boot &quot;1.3-19&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## cluster &quot;2.0.6&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## foreign &quot;0.8-68&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## lattice &quot;0.20-35&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## MASS &quot;7.3-47&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; ## Matrix &quot;1.2-10&quot; &quot;C:/Users/YKS-NIC/Documents/R/win-library/3.3&quot; 1.1.3 Package Install / Removal install.packages( c(&#39;ggplot&#39;, &#39;ggExtra&#39;) ) remove.packages ( c(&#39;ggplot&#39;, &#39;ggExtra&#39;) ) 1.1.4 Package Update old.packages() ## list all old packages, their old version and available new version update.packages() ## need to input y/n/c for each old package to update update.packages( ask=FALSE ) ## automatically update all packages without asking 1.1.5 Package Corruption Sometimes a corrupted R package can give below issues: Error loading a library Error installing a library Error removing a library The solution is to: Remove the problematic package folder (see where they are stored using .libPaths() ) Reinstall the package "],
["1-2-string.html", "1.2 String", " 1.2 String 1.2.1 Library library(stringr) Package Function Purpose 1 base nchar Number of characters strsplit Parse a string to vector cat Concatenate and output to screen/file only, no storage format formatting text/number to pretty text format 2 string_r str_length Number of characters, similar to nchar() str_sub Extract substrings, similar to substring() str_c String concatenation, similar to paste() str_trim Removes leading and trailing whitespace str_pad Pads a string 1.2.2 Concatenating 1.2.2.1 Sample Data a = c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) b = c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;,&#39;e&#39;) n = c(10, 20, 30 ) c = c(T, T, F) 1.2.2.2 Element-wise Concatenation So far the example concatenantes single multiple vectors (each with single element) Let’s look at multiple elements vectors, and notice how the vectorization works paste is a vectorized funciton: Iterates through each element of the vectors in parallel In each iteraction, combine string from the all the vectors’ element Default seperator is ‘’ collapse return the output as single vector coerce NA to string !!! Not an usual behavior paste(a,n,c) ## [1] &quot;a 10 TRUE&quot; &quot;b 20 TRUE&quot; &quot;c 30 FALSE&quot; paste(a,n,c, sep=&#39;.&#39;, collapse=&#39;/&#39;) ## [1] &quot;a.10.TRUE/b.20.TRUE/c.30.FALSE&quot; paste(&quot;May&quot;, NA, &quot;The&quot;, &quot;Force&quot;, NULL, &quot;Be&quot;, &quot;With&quot;, character(0), &quot;You&quot;) ## [1] &quot;May NA The Force Be With You&quot; string_r::str_c is almost similar to paste, with additional cool features below: str_c has no default seperator str_c silently removed NULL and character(0) str_c display warning message if vector length not equal str_c return NA if NA is found on the input; a more consistant behavior str_c(a,n,c, sep=&#39;.&#39;, collapse=&#39;/&#39;) ## [1] &quot;a.10.TRUE/b.20.TRUE/c.30.FALSE&quot; str_c(b,n,c, sep=&#39;.&#39;, collapse=&#39;/&#39;) ## FAIL, because vector b is longer than others ## Warning in stri_c(..., sep = sep, collapse = collapse, ignore_null = TRUE): ## longer object length is not a multiple of shorter object length ## [1] &quot;a.10.TRUE/b.20.TRUE/c.30.FALSE/e.10.TRUE&quot; str_c(&quot;May&quot;, NA, &quot;The&quot;, &quot;Force&quot;, NULL, &quot;Be&quot;, &quot;With&quot;, character(0), &quot;You&quot;) ## [1] NA 1.2.2.3 Vector Merging (Back To Back) c() join multiple vectors together into one big vector c(a,n,c) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;10&quot; &quot;20&quot; &quot;30&quot; &quot;TRUE&quot; &quot;TRUE&quot; &quot;FALSE&quot; 1.2.2.4 Output to Screen/File Use cat for sole purpose of output to screen or file, NO STORING TO VARIABLE. cat(… , file = “”, sep = &quot; “, fill = FALSE, labels = NULL, append = FALSE) Default Seperator n = 1:3 t = c(&#39;Text1&#39;, &#39;Text2&#39;, &#39;Text3&#39;) cat(&#39;Number n=&#39;,n,&#39;, Text t=&#39;, t) ## Number n= 1 2 3 , Text t= Text1 Text2 Text3 cat(&#39;Number n=&#39;,n,&#39;, Text t=&#39;, t, sep=&#39;:&#39;) ## Number n=:1:2:3:, Text t=:Text1:Text2:Text3 Breaking Lines cat(&#39;Number n=&#39;,n,&#39;, Text t=&#39;, t, fill=10) # line break after 10 chars ## Number n= ## 1 2 3 ## , Text t= ## Text1 ## Text2 ## Text3 cat(&#39;Number n=&#39;,n,&#39;, Text t=&#39;, t, fill=1) # line break after 1 chars ## Number n= ## 1 ## 2 ## 3 ## , Text t= ## Text1 ## Text2 ## Text3 1.2.3 Parsing strsplit(&#39; I Love You&#39;, split = &#39;&#39;) # split every character ## [[1]] ## [1] &quot; &quot; &quot;I&quot; &quot; &quot; &quot;L&quot; &quot;o&quot; &quot;v&quot; &quot;e&quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;Y&quot; &quot;o&quot; &quot;u&quot; strsplit(&#39; I Love You&#39;, split = &#39; &#39;) # split with &#39; &#39; as seperator ## [[1]] ## [1] &quot;&quot; &quot;I&quot; &quot;Love&quot; &quot;&quot; &quot;&quot; &quot;You&quot; 1.2.4 Formating format() allow us to format R object for pretty printing, especially numeric data. format(x, trim = FALSE, digits = NULL, nsmall = 0L, justify = c(&quot;left&quot;, &quot;right&quot;, &quot;centre&quot;, &quot;none&quot;), width = NULL, na.encode = TRUE, scientific = NA, big.mark = &quot;&quot;, big.interval = 3L, small.mark = &quot;&quot;, small.interval = 5L, decimal.mark = getOption(&quot;OutDec&quot;), zero.print = NULL, drop0trailing = FALSE, ...) 1.2.4.1 Number Formating : R-Style format(c(13.7, 13.123456789)) ## [1] &quot;13.70000&quot; &quot;13.12346&quot; nsmall : minimum number of digits to the right of the decimal point. format(c(13.7, 13.123), nsmall=6) # zero padded on the right ## [1] &quot;13.700000&quot; &quot;13.123000&quot; format(c(13.7, 13.123456789), nsmall=6) # decimals were truncated ## [1] &quot;13.700000&quot; &quot;13.123457&quot; digits : how many significant digits are to be used for numeric. Default uses getOption(“digits”). format(c(13.7, 13.123), digits=6) # zero not padded ## [1] &quot;13.700&quot; &quot;13.123&quot; format(c(13.7, 13.123456789), digits=6) # digits being truncated ## [1] &quot;13.7000&quot; &quot;13.1235&quot; bigmark : decimals will be ignored format(1234567.34, big.mark=&#39;,&#39;) ## [1] &quot;1,234,567&quot; 1.2.4.2 Numer Formating : C-Style sprintf(&quot;%f&quot;, pi) # &#39;%f&#39; indicates &#39;fixed point&#39; decimal notation ## [1] &quot;3.141593&quot; sprintf(&quot;%.3f&quot;, pi) # decimal notation with 3 decimal digits ## [1] &quot;3.142&quot; sprintf(&quot;%1.0f&quot;, pi) # 1 integer and 0 decimal digits ## [1] &quot;3&quot; sprintf(&quot;%8.3f&quot;, pi) # total width 8 (including demical point), 3 decimals ## [1] &quot; 3.142&quot; sprintf(&quot;%+f&quot;, pi) # print with sign (positive) ## [1] &quot;+3.141593&quot; sprintf(&quot;% f&quot;, pi) # prefix a space ## [1] &quot; 3.141593&quot; sprintf(&quot;%-10f.3&quot;, pi) # left justified ## [1] &quot;3.141593 .3&quot; sprintf(&quot;%e&quot;, pi) # exponential &#39;e&#39; notation ## [1] &quot;3.141593e+00&quot; sprintf(&quot;%E&quot;, pi) # exponential &#39;E&#39; notation ## [1] &quot;3.141593E+00&quot; sprintf(&quot;%g&quot;, pi) # number of significant digits (6 by default) ## [1] &quot;3.14159&quot; 1.2.4.3 Text Formating By default, format() pads the strings with spaces so that they are all the same length default justify is ‘left’ format(c(&quot;A&quot;, &quot;BB&quot;, &quot;CCC&quot;,&quot;DDDD&quot;)) ## [1] &quot;A &quot; &quot;BB &quot; &quot;CCC &quot; &quot;DDDD&quot; width : minimum width of the text format(c(&quot;A&quot;, &quot;BB&quot;, &quot;CCC&quot;,&quot;DDDDD&quot;), width = 7, justify = &quot;right&quot;) ## [1] &quot; A&quot; &quot; BB&quot; &quot; CCC&quot; &quot; DDDDD&quot; 1.2.5 Statistics 1.2.5.1 Length of String Both functions below are equivalent. base::nchar base::nchar( x ) \\(\\quad\\) x = char vector nchar(c(&#39;a&#39;, &#39;abc&#39;, &#39;abcde&#39;, NA)) ## [1] 1 3 5 NA nchar(c(133, 5143.34, NA)) # coerce input to &#39;133&#39;,&#39;514.34&#39;, NA ## [1] 3 7 NA nchar(c(T,TRUE,F,FALSE)) # coerce input to &#39;TRUE&#39;,&#39;TRUE&#39;,&#39;FALSE&#39;,&#39;FALSE&#39; ## [1] 4 4 5 5 stringr::str_length str_length(c(&#39;a&#39;, &#39;abc&#39;, &#39;abcde&#39;, NA)) ## [1] 1 3 5 NA str_length(c(133, 5143.34, NA)) # coerce input to &#39;133&#39;,&#39;514.34&#39;, NA ## [1] 3 7 NA str_length(c(T,TRUE,F,FALSE)) # coerce input to &#39;TRUE&#39;,&#39;TRUE&#39;,&#39;FALSE&#39;,&#39;FALSE&#39; ## [1] 4 4 5 5 "],
["1-3-set-operation.html", "1.3 Set Operation", " 1.3 Set Operation 1.3.1 Library Package Function Purpose 1 base union Set union intersect Intersection setdiff Set difference setequal Equal sets identical Exact equality (including sequene) is.element String concatenation %in% Contains sort Sorting 1.3.2 Set Equality We want to know if two vectors contain similar elements. Order of the elements are not important. set1 = c(&#39;a&#39;,&#39;b&#39;,&#39;123.33&#39;) set2 = c(&#39;a&#39;,&#39;b&#39;,123.33) # number coerce to character set3 = c(&#39;a&#39;,123.33,&#39;b&#39;) # number coerce to character setequal(set1,set2) ## [1] TRUE setequal(set2,set3) # order doesn&#39;t matters ## [1] TRUE 1.3.3 Exact Equality set1 = c(&#39;a&#39;,&#39;b&#39;,&#39;123.33&#39;) set2 = c(&#39;a&#39;,&#39;b&#39;,123.33) # number coerce to character set3 = c(&#39;a&#39;,123.33,&#39;b&#39;) # number coerce to character identical(set1,set2) ## [1] TRUE identical(set2,set3) # order matters ## [1] FALSE 1.3.4 Element Contained We can check if element(s) is contained in a vector using set operation is.element or shortcut %in%. set1 = c(&#39;a&#39;,&#39;b&#39;,123.33, NA) # number coerce to character is.element(c(123.33,&#39;b&#39;),set1) # number coerce to character ## [1] TRUE TRUE c(123.33,NA) %in% set1 # number coerce to character ## [1] TRUE TRUE NA %in% set1 ## [1] TRUE "],
["1-4-loops.html", "1.4 Loops", " 1.4 Loops 1.4.1 Sample Data my.df ## com dept grp team value1 value2 value3 ## 1 C1 D2 G2 T2 47.61404 19.66914 10.134088 ## 2 C2 D1 G2 T1 45.00807 18.46697 9.509314 ## 3 C2 D1 G1 T1 46.11873 17.26641 9.559452 ## 4 C2 D2 G2 T1 50.32229 17.48848 10.459589 ## 5 C2 D2 G1 T1 54.79747 27.24751 9.306280 1.4.2 Loop Through A Vector 1.4.3 Loop Through Multiple Columns/Rows apply loops through all rows or columns, take each column/row as a vector and supply them as input to a function. The function will compute the vector supplied, and return output in one of the form below base on the function used: Return single value per row/column, eg. sum() Return multiple value per row/column, eg. function(x) x^2 At the end of the ‘loop’, all results from each iteration are combined into one vector or matrix as final output. apply (X, MARGIN, FUN, ...) \\(\\quad\\) X : matrix (anything else will be converted to matrix \\(\\quad\\) MARGIN: 1 - row-wise, 2-column-wise \\(\\quad\\) FUN: function to apply, can be a custom function \\(\\quad\\) ... : optional parameters for FUN 1.4.3.1 Row-Wise Function Iterate through each row with parameter MARGIN=1. Each output column represent a data ROW. # single value returned per row apply( my.df[,5:7], 1, sum ) ## [1] 77.41727 72.98435 72.94460 78.27037 91.35126 # multiple values returned per row apply( my.df[,5:7], 1, function (x,y) x^y, y=3 ) ## [,1] [,2] [,3] [,4] [,5] ## value1 107945.614 91174.0205 98091.6484 127432.820 164543.8026 ## value2 7609.504 6297.7735 5147.6194 5348.803 20229.2717 ## value3 1040.768 859.8993 873.5726 1144.311 805.9875 1.4.3.2 Column-Wise Function Iterate through each column with paramneter MARGIN=2. Each output column represent a data COLUMN. # single value returned per column apply( my.df[,5:7], 2, sum) ## value1 value2 value3 ## 243.86060 100.13852 48.96872 # multiple values returned per column apply( my.df[,5:7], 2, function (x,y) x^y, y=3 ) ## value1 value2 value3 ## [1,] 107945.61 7609.504 1040.7683 ## [2,] 91174.02 6297.773 859.8993 ## [3,] 98091.65 5147.619 873.5726 ## [4,] 127432.82 5348.803 1144.3106 ## [5,] 164543.80 20229.272 805.9875 "],
["1-5-data-import.html", "1.5 Data Import", " 1.5 Data Import 1.5.1 Data Import Performance There are multiple ways to import data into R, most common ones are discussed here: Base read.table data.table::fread readr::read_csv 1.5.1.1 Comparison Below comparison charts shows reading performance relative to data.table::fread: Base read.table is more than 5x slower on large files readr performance is acceptable, and improving closer to fread at larger data file Source 1.5.2 What To Choose Few criterias must be considered when choosing the right import: Performance fread is very high speed, follow by readr read.table is slow, and not suitable for large datasets Parsing Detection fread autmatically detect header fread autmatically detect column delimeter and decimal readr auto parse date/time format if data in format “yyyy-mm-dd” Factor Conversion fread and read.table both has stringAsFactor=TRUE option for auto conver string to factor In readr, need to manually specify which column to convert to factor, and all the factor levels values required definition upfront (downside) Progress Bar fread and readr provides progress info when the loading is going to take a while Other Features readr is part of tidyverse ecosystem, readr returns tibble and datafrma eobject fread has advance data manipulation functions at high speed, fread return data.table and data.frame object 1.5.3 Working Directory Before importing data into R, we must first check the current working directory, so that we can specify the relative path for the files we want to import. To display the current working directory. getwd() ## [1] &quot;C:/Users/YKS-NIC/Dropbox/R/business_technical_analytics_r&quot; To set the working directory, use below: setwd(&quot;...new path...) 1.5.4 Sample Data File We use sample data from excel, exported to CSV. Following importing method shows the process of Excel–&gt;csv–&gt;R data.frame. 1.5.4.1 Original Excel Data Source Check out the Yellow areas in codes below ! 1.5.4.2 Exported CSV File from Excel ,,dept,gender,weight,height,date_birth,amount,date_last,date first 1,ID101,D1,Male,35,173,1/7/1973,100,2/29/2016,2013-07-31 2,ID102,D2,Female,37.1,164,28/2/1980,121,4/1/2017,2013-08-31 3,ID103,D3,Female,43.12,178,31/12/1978,152,10/31/2015,2014-12-31 4,ID104,D1,Male,38.123,182,12/1/1997,133,11/1/2016,2015-02-28 5,ID105,D1,Male,54.1234,159,2/1/1982,143,9/30/2016,2012-06-15 6,ID106,D3,Female,34.12345,166,26/7/1973,155,11/27/2015,2013-04-28 7,ID107,D2,Male,49.123456,153,21/8/1985,117,3/31/2017,2014-03-01 8,ID108,D1,Male,50.2,159,2/1/1982,143,9/30/2016,2011-06-15 9,ID109,D3,Female,59.1,166,13/7/1975,155,11/1/2017,2012-04-02 10,ID110,D2,Male,63.2,163,24/8/1982,117,3/12/2016,2013-03-12 11,ID111,D3,Female,75.1,170,9/8/1979,135,2/1/2015, 12,ID112,D2,Male,52.1,169,NULL,128,NA, 13,ID113,D3,NULL,88.8,171,NULL,141,NA, ### Importing CSV 1.5.5 Base::read.csv read.csv is a similar to read.table but with some defaults value set as below for convenience of CSV import. In the resulting data.frame, row.names attribute are automatically assigned with sequence number starting from 1. read.csv ( file, \\(\\quad\\) header = TRUE - contain header row \\(\\quad\\) sep = “,” - column seperator marked as ‘,’ \\(\\quad\\) dec = “.” - decimals marked as ‘.’ \\(\\quad\\) na.strings = “NA” - vectors that define missing data marking \\(\\quad\\) check.names = TRUE - col names with white space replaced with ‘.’ \\(\\quad\\) stringsAsFactors = TRUE - convert string to factor As an exmple, the import below: Specified multiple string elements that represents missing data in the CSV file Set stirngsAsFactors=FALSE so that all string columns are not converted to factor automatically, on other words, they are imported as character ./ is a relative path represents current R working directory. It can be replaced with complete non-relative path Default parameter check.names=TRUE automatically named ‘unnamed’ column, as well as replacing white spaces for column names with ‘.’ sample.df &lt;- read.csv (&quot;./datasets/import_sample.csv&quot;, stringsAsFactors = FALSE, na.strings=c(&#39;NA&#39;,&#39;NULL&#39;,&#39;&#39;), encoding=&quot;UTF-8&quot;) sample.df [,-10] ## X X.1 dept gender weight height date_birth amount date_last ## 1 1 ID101 D1 Male 35.00000 173 1/7/1973 100 2/29/2016 ## 2 2 ID102 D2 Female 37.10000 164 28/2/1980 121 4/1/2017 ## 3 3 ID103 D3 Female 43.12000 178 31/12/1978 152 10/31/2015 ## 4 4 ID104 D1 Male 38.12300 182 12/1/1997 133 11/1/2016 ## 5 5 ID105 D1 Male 54.12340 159 2/1/1982 143 9/30/2016 ## 6 6 ID106 D3 Female 34.12345 166 26/7/1973 155 11/27/2015 ## 7 7 ID107 D2 Male 49.12346 153 21/8/1985 117 3/31/2017 ## 8 8 ID108 D1 Male 50.20000 159 2/1/1982 143 9/30/2016 ## 9 9 ID109 D3 Female 59.10000 166 13/7/1975 155 11/1/2017 ## 10 10 ID110 D2 Male 63.20000 163 24/8/1982 117 3/12/2016 ## 11 11 ID111 D3 Female 75.10000 170 9/8/1979 135 2/1/2015 ## 12 12 ID112 D2 Male 52.10000 169 &lt;NA&gt; 128 &lt;NA&gt; ## 13 13 ID113 D3 &lt;NA&gt; 88.80000 171 &lt;NA&gt; 141 &lt;NA&gt; str(sample.df) ## &#39;data.frame&#39;: 13 obs. of 10 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ X.1 : chr &quot;ID101&quot; &quot;ID102&quot; &quot;ID103&quot; &quot;ID104&quot; ... ## $ dept : chr &quot;D1&quot; &quot;D2&quot; &quot;D3&quot; &quot;D1&quot; ... ## $ gender : chr &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; &quot;Male&quot; ... ## $ weight : num 35 37.1 43.1 38.1 54.1 ... ## $ height : int 173 164 178 182 159 166 153 159 166 163 ... ## $ date_birth: chr &quot;1/7/1973&quot; &quot;28/2/1980&quot; &quot;31/12/1978&quot; &quot;12/1/1997&quot; ... ## $ amount : int 100 121 152 133 143 155 117 143 155 117 ... ## $ date_last : chr &quot;2/29/2016&quot; &quot;4/1/2017&quot; &quot;10/31/2015&quot; &quot;11/1/2016&quot; ... ## $ date.first: chr &quot;2013-07-31&quot; &quot;2013-08-31&quot; &quot;2014-12-31&quot; &quot;2015-02-28&quot; ... 1.5.6 data.table::fread fread ( input, \\(\\quad\\) header = ‘auto’ - auto detect header (if all non empty cells in first row character) \\(\\quad\\) sep = “auto” - auto detect column seperator \\(\\quad\\) dec = if (sep!=“.”) “.” else “,”, in a way automatic selected \\(\\quad\\) na.strings = “NA” - vectors that define missing data marking \\(\\quad\\) check.names = FALSE - do not replace col names with white space with ‘.’ \\(\\quad\\) stringsAsFactors = FALSE - do not convert string to factor \\(\\quad\\) nrows = -1 - how many rows to read, default -1 means read all rows \\(\\quad\\) data.table = TRUE - return data.table object, FALSE - return data.frame object library(data.table) my.dt = fread(&quot;./datasets/import_sample.csv&quot;, stringsAsFactors = TRUE, na.strings=c(&#39;NA&#39;,&#39;NULL&#39;,&#39;&#39;), check.names = TRUE, data.table = FALSE) my.dt[,-10] ## V1 V2 dept gender weight height date_birth amount date_last ## 1 1 ID101 D1 Male 35.00000 173 1/7/1973 100 2/29/2016 ## 2 2 ID102 D2 Female 37.10000 164 28/2/1980 121 4/1/2017 ## 3 3 ID103 D3 Female 43.12000 178 31/12/1978 152 10/31/2015 ## 4 4 ID104 D1 Male 38.12300 182 12/1/1997 133 11/1/2016 ## 5 5 ID105 D1 Male 54.12340 159 2/1/1982 143 9/30/2016 ## 6 6 ID106 D3 Female 34.12345 166 26/7/1973 155 11/27/2015 ## 7 7 ID107 D2 Male 49.12346 153 21/8/1985 117 3/31/2017 ## 8 8 ID108 D1 Male 50.20000 159 2/1/1982 143 9/30/2016 ## 9 9 ID109 D3 Female 59.10000 166 13/7/1975 155 11/1/2017 ## 10 10 ID110 D2 Male 63.20000 163 24/8/1982 117 3/12/2016 ## 11 11 ID111 D3 Female 75.10000 170 9/8/1979 135 2/1/2015 ## 12 12 ID112 D2 Male 52.10000 169 &lt;NA&gt; 128 &lt;NA&gt; ## 13 13 ID113 D3 &lt;NA&gt; 88.80000 171 &lt;NA&gt; 141 &lt;NA&gt; str(my.dt) ## &#39;data.frame&#39;: 13 obs. of 10 variables: ## $ V1 : int 1 2 3 4 5 6 7 8 9 10 ... ## $ V2 : Factor w/ 13 levels &quot;ID101&quot;,&quot;ID102&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ dept : Factor w/ 3 levels &quot;D1&quot;,&quot;D2&quot;,&quot;D3&quot;: 1 2 3 1 1 3 2 1 3 2 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 1 2 2 1 2 2 1 2 ... ## $ weight : num 35 37.1 43.1 38.1 54.1 ... ## $ height : int 173 164 178 182 159 166 153 159 166 163 ... ## $ date_birth: Factor w/ 10 levels &quot;1/7/1973&quot;,&quot;12/1/1997&quot;,..: 1 8 9 2 4 7 5 4 3 6 ... ## $ amount : int 100 121 152 133 143 155 117 143 155 117 ... ## $ date_last : Factor w/ 10 levels &quot;10/31/2015&quot;,&quot;11/1/2016&quot;,..: 6 9 1 2 10 4 8 10 3 7 ... ## $ date.first: Factor w/ 10 levels &quot;2011-06-15&quot;,&quot;2012-04-02&quot;,..: 6 7 9 10 3 5 8 1 2 4 ... 1.5.7 readr::read_csv read_csv returns object type: ‘tbl_df’, ‘tbl’ and ‘data.frame’ read_csv ( file, \\(\\quad\\) col_names = TRUE - first row is header, if FALSE or char vector to specify column names \\(\\quad\\) col_types = NULL - all columns type will be imputed based on first 100 rows, alternatively specify: \\(\\quad\\) \\(\\quad\\) list( Sepal.Length = col_double(), …) \\(\\quad\\) na = c(“”, “NA”) - characters used for detecting missing data \\(\\quad\\) skip = 0 - no skipping for first number of rows \\(\\quad\\) n_max = Inf - how many rows to read, default read all library(readr) my.rd = read_csv(&quot;./datasets/import_sample.csv&quot;, na = c(&#39;NA&#39;,&#39;NULL&#39;,&#39;&#39;), col_types = list ( gender=col_factor(c(&#39;Male&#39;,&#39;Female&#39;)) )) ## Warning: Missing column names filled in: &#39;X1&#39; [1], &#39;X2&#39; [2] my.rd[,-10] ## # A tibble: 13 x 9 ## X1 X2 dept gender weight height date_birth amount date_last ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;fctr&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 1 ID101 D1 Male 35.00000 173 1/7/1973 100 2/29/2016 ## 2 2 ID102 D2 Female 37.10000 164 28/2/1980 121 4/1/2017 ## 3 3 ID103 D3 Female 43.12000 178 31/12/1978 152 10/31/2015 ## 4 4 ID104 D1 Male 38.12300 182 12/1/1997 133 11/1/2016 ## 5 5 ID105 D1 Male 54.12340 159 2/1/1982 143 9/30/2016 ## 6 6 ID106 D3 Female 34.12345 166 26/7/1973 155 11/27/2015 ## 7 7 ID107 D2 Male 49.12346 153 21/8/1985 117 3/31/2017 ## 8 8 ID108 D1 Male 50.20000 159 2/1/1982 143 9/30/2016 ## 9 9 ID109 D3 Female 59.10000 166 13/7/1975 155 11/1/2017 ## 10 10 ID110 D2 Male 63.20000 163 24/8/1982 117 3/12/2016 ## 11 11 ID111 D3 Female 75.10000 170 9/8/1979 135 2/1/2015 ## 12 12 ID112 D2 Male 52.10000 169 &lt;NA&gt; 128 &lt;NA&gt; ## 13 13 ID113 D3 NA 88.80000 171 &lt;NA&gt; 141 &lt;NA&gt; str(my.rd) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 13 obs. of 10 variables: ## $ X1 : int 1 2 3 4 5 6 7 8 9 10 ... ## $ X2 : chr &quot;ID101&quot; &quot;ID102&quot; &quot;ID103&quot; &quot;ID104&quot; ... ## $ dept : chr &quot;D1&quot; &quot;D2&quot; &quot;D3&quot; &quot;D1&quot; ... ## $ gender : Factor w/ 2 levels &quot;Male&quot;,&quot;Female&quot;: 1 2 2 1 1 2 1 1 2 1 ... ## $ weight : num 35 37.1 43.1 38.1 54.1 ... ## $ height : int 173 164 178 182 159 166 153 159 166 163 ... ## $ date_birth: chr &quot;1/7/1973&quot; &quot;28/2/1980&quot; &quot;31/12/1978&quot; &quot;12/1/1997&quot; ... ## $ amount : int 100 121 152 133 143 155 117 143 155 117 ... ## $ date_last : chr &quot;2/29/2016&quot; &quot;4/1/2017&quot; &quot;10/31/2015&quot; &quot;11/1/2016&quot; ... ## $ date first: Date, format: &quot;2013-07-31&quot; &quot;2013-08-31&quot; ... ## - attr(*, &quot;spec&quot;)=List of 2 ## ..$ cols :List of 10 ## .. ..$ X1 : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ X2 : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ dept : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ gender :List of 3 ## .. .. ..$ levels : chr &quot;Male&quot; &quot;Female&quot; ## .. .. ..$ ordered : logi FALSE ## .. .. ..$ include_na: logi FALSE ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_factor&quot; &quot;collector&quot; ## .. ..$ weight : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ height : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ date_birth: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ amount : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ date_last : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ date first:List of 1 ## .. .. ..$ format: chr &quot;&quot; ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_date&quot; &quot;collector&quot; ## ..$ default: list() ## .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_guess&quot; &quot;collector&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;col_spec&quot; -->"]
]
